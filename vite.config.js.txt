import {defineConfig, loadEnv} from 'vite'
import react from '@vitejs/plugin-react'
import {config} from "dotenv";
import { fileURLToPath, URL } from 'node:url'
import commonjs from "vite-plugin-commonjs";
import path from 'path';
import federation from "@originjs/vite-plugin-federation";
config();
// https://vitejs.dev/config/
const __filename = fileURLToPath(import.meta.url);
const isDev = process.env.NODE_ENV === "development";
console.log(isDev)
console.log(import.meta.env)
const __dirname = path.dirname(__filename);
export default ({ mode }) => {
  process.env = {...process.env, ...loadEnv(mode, process.cwd())};
  return defineConfig({
    base: '/PNE1-PortaleApplicativo-WEB/',
    plugins: [react(),federation({
      name: 'host-app',
      remotes: isDev
          ? {} // Non caricare remoti in sviluppo
          : {
            remoteApp: "/remoteApp/assets/remoteEntry.js", // Usato in produzione
          },
      shared: ['react', 'react-dom']
    }),commonjs()],
    build: {
      modulePreload: false,
      target: "esnext",
      minify: false,
      cssCodeSplit: false,
    },
    resolve: {
      alias: {
        '@': fileURLToPath(new URL('./src', import.meta.url)),
        "remoteApp": isDev
            ? path.resolve(__dirname, "F:\\GITHUB\\remote\\src") // Importa direttamente i moduli durante lo sviluppo
            : "remoteApp/assets/remoteEntry.js", // Usa federazione in produzione
      }
    },
    css: {
      preprocessorOptions: {
        scss: {
          silenceDeprecations: ["mixed-decls"]
        }
      }
    },
    server: {
      watch: {
        usePolling: true, // Utile per alcuni ambienti come Docker
      },
      hmr: {
        protocol: "ws",
        host: "localhost",
        port: 24678, // Porta di default di Vite per HMR
      },
      proxy: {
        '/node_modules/': {
          target: 'http://localhost:3000/PNE1-PortaleApplicativo-WEB'
        },
        '/remoteApp/': {
          target: "http://localhost:5001", //mettere VITE_HOST se si testa da remoto
          //target: 'http://mpv50221.sidi.mpi.it',
          changeOrigin: true,
          ws: false
        },
        '/EIAD-gateway-application-SERVICES/': {
          //target: "https://iamcoll.pubblica.istruzione.it",
          //target: env.APP_TARGET,
          //target: 'https://miurjb5.pubblica.istruzione.it',
          target: process.env.VITE_HOST,
          //target: 'http://mpv50221.sidi.mpi.it',
          changeOrigin: true,
          ws: false,
          configure: (proxy, _options) => {
            proxy.on("error", (err, _req, _res) => {
              console.log("proxy error", err);
            });
            proxy.on("proxyReq", (proxyReq, req, _res) => {
              console.log(
                  "Sending Request:",
                  req.method,
                  req.url,
                  " => TO THE TARGET =>  ",
                  proxyReq.method,
                  proxyReq.protocol,
                  proxyReq.host,
                  proxyReq.path,
                  JSON.stringify(proxyReq.getHeaders()),
              );
            });
            proxy.on("proxyRes", (proxyRes, req, _res) => {
              console.log(
                  "Received Response from the Target:",
                  proxyRes.statusCode,
                  req.url,
                  JSON.stringify(proxyRes.headers),
              );
            });
          },
        },
      }
    }
  })
}